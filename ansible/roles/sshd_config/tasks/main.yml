---

- block: # become: true
  - name: Create backup dir for config.d and auth_keys
    tempfile:
      state: directory
    register: backup_sshd_dir

  - name: Copy files to backup dirs
    copy:
      src: "{{sshd_backups.source}}"
      dest: "{{sshd_backups.destination}}"
      remote_src: true
    loop:
      - { source: /etc/ssh/config.d, destination: "{{backup_sshd_dir.path}}" }
      - { source: /etc/ssh/auth_keys, destination: "{{backup_sshd_dir.path}}" }
    loop_control:
      loop_var: sshd_backups

  - name: Recreate config.d and auth_keys
    file:
      path: "{{ssh_dirs.dir}}"
      state: "{{ssh_dirs.status}}"
    loop:
      - { dir: /etc/ssh/config.d, status: absent }
      - { dir: /etc/ssh/auth_keys, status: absent }
      - { dir: /etc/ssh/config.d, status: directory }
      - { dir: /etc/ssh/auth_keys, status: directory }
    loop_control:
      loop_var: ssh_dirs
    register: ssh_directories

  - name: Append default sshd_config with Include for custom sshd_config rules
    lineinfile:
      path: /etc/ssh/sshd_config
      regexp: "Include /etc/ssh/config.d/*.conf"
      line: "Include /etc/ssh/config.d/*.conf"
      state: present
      insertafter: EOF
      validate: /usr/sbin/sshd -t -f %s
    register: append_default_sshd_config

  - name: Place authorized_keys file
    assemble:
      src: "{{ role_path }}/files"
      dest: "/etc/ssh/auth_keys/{{ remote_users }}"
      remote_src: false
    loop: "{{ shell_users }}"
    loop_control:
      loop_var: remote_users
    register: key_files

  - name: Create ~/.ssh dirs
    file:
      path: "/home/{{ remote_ssh_dirs }}/.ssh"
      state: directory
      mode: 0700
    loop: "{{ shell_users }}"
    loop_control:
      loop_var: remote_ssh_dirs

  - name: Empty canonical ~/.ssh/authorized_keys files
    copy:
      dest: "/home/{{ blank_remote_users }}/.ssh/authorized_keys"
      content: "No longer used, sorry."
      owner: "{{ blank_remote_users }}"
      group: "{{ blank_remote_users }}"
      mode: 0400
    loop: "{{ shell_users }}"
    loop_control:
      loop_var: blank_remote_users

  - name: Place host unique sshd_config file
    template:
      src: "templates/host_sshd_config.conf"
      dest: "/etc/ssh/config.d/{{ hostname }}.conf"
      mode: 0644
      validate: /usr/sbin/sshd -t -f %s
    register: host_sshd_config

  - name: Restart sshd
    systemd:
      name: sshd
      state: restarted
    when: >
      (key_files.changed == true) or
      (append_default_sshd_config.changed == true ) or
      (host_sshd_config.changed == true) or
      (ssh_directories.results[0].changed == true) or
      (ssh_directories.results[1].changed == true)
    register: sshd_state

  - name: Remove backups once SSHD restart successful
    file:
      path: "{{backup_sshd_dir.path}}"
      state: absent
    when: sshd_state.status.ActiveState == "active"
  become: true

  rescue:
    - name: Replacing backups
      copy:
        src: "{{sshd_backup_replace.source}}"
        dest: "{{sshd_backup_replace.destination}}"
        remote_src: true
      loop:
        - { source: "{{backup_sshd_dir.path}}/config.d", destination: /etc/ssh/ }
        - { source: "{{backup_sshd_dir.path}}/auth_keys", destination: /etc/ssh/ }
      loop_control:
        loop_var: sshd_backup_replace
      become: true
